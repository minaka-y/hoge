

enum borderType {
	BORDER_REPLICATE=1,
	BORDER_CONSTANT=0,
	BORDER_REFLECT=2,
	BORDER_WRAP=3,
	BORDER_REFLECT_101=4,
	BORDER_REFLECT101=4,
	BORDER_TRANSPARENT=5,
	BORDER_DEFAULT=4,
	BORDER_ISOLATED=16
};

enum morphology {
	MORPH_ERODE=0,
	MORPH_DILATE=1,
	MORPH_OPEN=2,
	MORPH_CLOSE=3,
	MORPH_GRADIENT=4,
	MORPH_TOPHAT=5,
	MORPH_BLACKHAT=66
};


enum adaptive_threshold {
	ADAPTIVE_THRESH_MEAN_C=0,
	THRESH_BINARY_INV=1
};

enum thoreshold_type {
	THRESH_BINARY=0,
	THRESH_BINARY_INV=1
};

enum color_code {
    CV_BGR2RGB=4,
    CV_RGB2BGR=4,
    CV_BGR2Luv=50,
    CV_RGB2Luv=51,
    CV_BGR2GRAY=6,
    CV_RGB2GRAY=7
};

enum distance_type {
	CV_DIST_L1=1,
	CV_DIST_L2=2,
	CV_DIST_C=3,
	CV_DIST_L12=4
};

enum optical_flow {
    OPTFLOW_USE_INITIAL_FLOW=4,
    OPTFLOW_LK_GET_MIN_EIGENVALS=8,
    OPTFLOW_FARNEBACK_GAUSSIAN=256
};

enum Mat_type {
    CV_8UC1=0,
    CV_8UC3=16,
    CV_64FC1=6,
    CV_64FC2=14
};

// #01 bilateralFilter
void@unused bilateralFilter(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int d@param=1,
	double sigmaColor@param=1.0,
	double sigmaSpace@param=1.0,
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #02 blur
void@unused blur(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	cv::Size ksize@param=cv::Size(11,11),
	cv::Point anchor@param=cv::Point(-1, -1),
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #03 boxFilter
void@unused boxFilter(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int ddepth@param=-1,
	cv::Size ksize@param=cv::Size(11,11),
	cv::Point anchor@param=Point(-1,-1),
	bool normalize@param=true,
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #04 buildPyramid
void@unused buildPyramid(
	cv::Mat& src@inport,
	vector<cv::Mat>& dst@outport,
	int maxlevel@param=0,
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #05 copyMakeBorder
void@unused copyMakeBorder(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int top@param=1,
	int bottom@param=1,
	int left@param=1,
	int right@param=1,
	int borderType@list/borderType=BORDER_CONSTANT,
	Scalar& value@param=cv::Scalar(0,0,0)
	);


// #06 dilate
void@unused dilate(
    cv::Mat&  		src@inport,
    cv::Mat&        dst@outport,
    cv::Mat&  		kernel@param="matrix/kernel.xml",
    cv::Point       anchor@param=cv::Point(-1,-1),
    int             iteration@param=0,
    int             boarderType@list/borderType=BORDER_CONSTANT,
    cv::Scalar      borderValue@param=cv::Scalar(0,0,0)
    );


// #07 erode
void@unused erode(
    cv::Mat&  		src@inport,
    cv::Mat&        dst@outport,
    cv::Mat&		kernel@param="matrix/kernel.xml",
    cv::Point		anchor@param=cv::Point(-1,-1),
	int				iteration@param=1,
    int				borderType@list/borderType=BORDER_CONSTANT,
    cv::Scalar      borderValue@param=cv::Scalar(0,0,0)
    );


// #08 filter2D
void@unused filter2D(
    cv::Mat&  		src@inport,
    cv::Mat&        dst@outport,
    int				ddepth@param=1,
    cv::Mat&		kernel@param="matrix/kernel.xml",
    cv::Point		anchor@param=cv::Point(-1,-1),
    double			delta@param=0.0,
    int				borderType@list/borderType=BORDER_DEFAULT
    );


// #09 GaussianBlur
void@unused GaussianBlur(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	cv::Size ksize@param=cv::Size(11,11),
	double sigmaX@param=0,
	double sigmaY@param=0,
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #10 medianBlur
void@unused medianBlur(
    cv::Mat&    	src@inport,
    cv::Mat&        dst@outport,
    int             ksize@param=1
    );


// #11 morphologyEx
void@unused morphologyEx(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int op@list/morphology=MORPH_OPEN,
	cv::Mat& element@param="matrix/element.xml",
	cv::Point anchor@param=cv::Point(-1,-1),
	int iterations@param=1,
	int borderType@list/borderType=BORDER_CONSTANT,
	cv::Scalar& borderValue@param=cv::morphologyDefaultBorderValue()
	);


// #12 Laplcaian
void@unused Laplacian(
	Mat& src@inport,
	Mat& dst@outport,
	int ddepth@param=1,
	int ksize@param=1,
	double scale@param=1,
	double delta@param=0,
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #13 PyrDown
void@unused pyrDown(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	cv::Size& dstsize@param=Size(),
	int borderType@list/borderType=BORDER_DEFAULT
	);

// #14 PyrUp
void@unused pyrUp(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	cv::Size& dstsize@param=Size(),
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #15 sepFilter2D
void@unused sepFilter2D(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int ddepth@param=1,
	cv::Mat& rowKernel@param="matrix/row_kernel.xml",
	cv::Mat& columnKernel@param="matrix/col_kernel.xml",
	cv::Point anchor@param=cv::Point(-1,-1),
	double delta@param=0,
	int borderType@list/borderType=BORDER_DEFAULT
	);

// #16 Sobel
void@unused Sobel(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int ddepth@param=1,
	int xorder@param=2,
	int yorder@param=2,
	int ksize@param=3,
	double scale@param=1,
	double delta@param=0,
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #17 Scharr
void@unused Scharr(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int ddepth@param=1,
	int xorder@param=2,
	int yorder@param=2,
	double scale@param=1,
	double delta@param=0,
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #18 getRectSubPix
void@unused getRectSubPix(
	cv::Mat& image@inport,
	cv::Size patchSize@param=cv::Size(10,10),
	cv::Point2f center@param=cv::Point2f(0,0),
	cv::Mat& dst@outport,
	int patchType@param=-1
	);


// #19 resize
void@unused resize(
    cv::Mat&  		src@inport,
    cv::Mat&        dst@outport,
    cv::Size        dsize@param=cv::Size(200,200),
    double          fx@param=0.0,
    double          fy@param=0.0,
	int             p0@param=1
    );


// #20 wrapAffine
void@unused warpAffine(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	cv::Mat& M@param="matrix/affine.xml",
	cv::Size dsize@param=cv::Size(200,200),
	int flags@param=cv::INTER_LINEAR,
	int borderMode@list/borderType=BORDER_CONSTANT,
	cv::Scalar& borderValue@param=cv::Scalar()
	);

// #21 warpPerspective
void@unused warpPerspective(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	cv::Mat& M@param="matrix/perspective.xml",
	cv::Size dsize@param=cv::Size(200,200),
	int flags@param=cv::INTER_LINEAR,
	int borderMode@list/borderType=BORDER_CONSTANT,
	cv::Scalar& borderValue@param=cv::Scalar()
	);

// #22 adaptiveThreshold
void@unused adaptiveThreshold(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	double maxValue@param=100,
	int adaptiveMethod@list/adaptive_threshold=ADAPTIVE_THRESH_MEAN_C,
	int thresholdType@list/thoreshold_type=THRESH_BINARY,
	int blockSize@param=5,
	double C@param=10
	);

// #23 cvtColor
void@unused cvtColor(
	Mat& src@inport,
	Mat& dst@outport,
	int code@list/color_code=CV_RGB2GRAY,
	int dstCn@param=0
	);

// #24 distanceTransformWrapper
void@unused distanceTransformWrapper(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int distanceType@list/distance_type=CV_DIST_C,
	int maskSize@param=11
	);

// #25 distanceTransformWrapperWithLabels
void@unused distanceTransformWrapperWithLabels(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	cv::Mat& labels@outport,
	int distanceType@list/distance_type=CV_DIST_C,
	int maskSize@param=3,
	int labelType@param=cv::DIST_LABEL_CCOMP
	);

// #25 Canny
void@unused Canny(
	cv::Mat& image@inport,
	cv::Mat& edges@outport,
	double threshold1@param=10,
	double threshold2@param=20,
	int apertureSize@param=3,
	bool L2gradient@param=false
	);


// # 26 cornerEigenValsAndVecs
void@unused cornerEigenValsAndVecs(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int blockSize@param=10,
	int apertureSize@param=15,
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #27 cornerHarris
void@unused cornerHarris(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int blockSize@param=15,
	int apertureSize@param=11,
	double k@param=10.0,
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #28 cornerMinEigenVal
void@unused cornerMinEigenVal(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int blockSize@param=10,
	int apertureSize@param=3,
	int borderType@list/borderType=BORDER_DEFAULT
	);


// #29 preCornerDetect
void@unused preCornerDetect(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int apertureSize@param=15,
	int borderType@list/borderType=BORDER_DEFAULT
	);

// #39 show_image
void@unused show_image(
	std::string& win_name@param="test",
	cv::Mat& src@inport
	);


// #31 imread
cv::Mat@outport imread(
	string& filename@param="image/lena.jpg",
	int flags@param=1
	);


// #32 inpaint
void@unused inpaint(
    cv::Mat&  		src@inport,
    cv::Mat&  		inpaintMask@inport,
    cv::Mat&        dst@outport,
    double          inpaintRadius@param=0,
    int             flags@param=INPAINT_NS
    );


// #33 calcOpticalFlowPryLK
void@unused calcOpticalFlowPyrLK(
	cv::Mat& prevImg@inport,
	cv::Mat& nextImg@inport,
	std::vector<cv::Point2f>& prevPts@inport,
	std::vector<cv::Point2f>& nextPts@outport,
	std::vector<uchar>& status@outport,
	std::vector<float>& err@outport,
	cv::Size winSize@param=Size(15, 15),
	int maxLevel@param=3,
	cv::TermCriteria criteria@param=cv::TermCriteria(cv::TermCriteria::COUNT+cv::TermCriteria::EPS, 30, 0.01),
	int flags@param=0,
	double minEigThreshold@param=1e-4
	);

// #34 calcOpticalFlowFarneback
void@unused calcOpticalFlowFarneback(
	cv::Mat& prevImg@inport,
	cv::Mat& nextImg@inport,
	cv::Mat& flow@outport,
	double pyrScale@param=0.5,
	int levels@param=1,
	int winsize@param=50,
	int iterations@param=10,
	int polyN@param=7,
	double polySigma@param=1.5,
	int flags@list/optical_flow=OPTFLOW_USE_INITIAL_FLOW
	);

// #35 load_image_seq
void@unused load_image_seq(
	std::string& file_name@param="image/lena.jpg",
	cv::Mat& dst@outport,
	int& num@param=0
	);

// #36 save_image_seq
void@unused save_image_seq(
	std::string& file_name@param="output.jpg",
	cv::Mat& src@inport,
	int& num@param=0
	);

// #37 load_matrix_seq
void@unused load_matrix_seq(
	std::string& file_name@param="matrix/matrix.xml",
	cv::Mat& dst@outport,
	int& num@param=0
	);

// #38 save_matrix_seq
void@unused save_matrix_seq(
	std::string& file_name@param="output.xml",
	cv::Mat& src@inport,
	int& num@param=0
	);

// #39 

void@unused CameraCapture( 
	cv::Mat& dst@outport, 
	int dev_num@param=0,  
	int width@param=0, 
	int height@param=0
	);

enum dft_flags{ 
	ZERO=0,
	DFT_INVERSE=1, 
	DFT_SCALE=2, 
	DFT_ROWS=4, 
	DFT_COMPLEX_OUTPUT=16, 
	DFT_REAL_OUTPUT=32
};

void@unused dft(
	cv::Mat& src@inport,
	cv::Mat& dst@outport,
	int flags@list/dft_flags=ZERO,
	int nonzeroRows@param=0
);

void@unused DFT(
	cv::Mat& Re_in@inport, 
	cv::Mat& Im_in@inport,
	cv::Mat& Comp_out@outport
);

void@unused ConvertTo(
	cv::Mat& src@inport, 
	cv::Mat& dst@outport,
	int rtype@list/Mat_type=CV_8UC3, 
	double alpha@param=1, 
	double beta@param=0
);

void@unused CalcMag(
	cv::Mat& src@inport,
	cv::Mat& dst@outport
);

void@unused Zeros(
	cv::Mat& src@inport,
	cv::Mat& dst@outport
);

void@unused shiftDFT(
	cv::Mat& src@inport,
	cv::Mat& dst@outport
);

void@unused IDFT(
	cv::Mat& src@inport, 
	cv::Mat& Re_out@outport, 
	cv::Mat& Im_out@outport
);
void@unused show_image_plus( 
	std::string& win_name@param="win_name", 
	cv::Mat& src@inport , 
	cv::Mat& data@outport
);
void@unused show_action(
	cv::Mat& src@inport
);
